{"ast":null,"code":"import IterResult from './iterresult';\nimport { clone, cloneDates } from './dateutil';\nimport { isArray } from './helpers';\n\nfunction argsMatch(left, right) {\n  if (Array.isArray(left)) {\n    if (!Array.isArray(right)) return false;\n    if (left.length !== right.length) return false;\n    return left.every(function (date, i) {\n      return date.getTime() === right[i].getTime();\n    });\n  }\n\n  if (left instanceof Date) {\n    return right instanceof Date && left.getTime() === right.getTime();\n  }\n\n  return left === right;\n}\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache() {\n    this.all = false;\n    this.before = [];\n    this.after = [];\n    this.between = [];\n  }\n  /**\n   * @param {String} what - all/before/after/between\n   * @param {Array,Date} value - an array of dates, one date, or null\n   * @param {Object?} args - _iter arguments\n   */\n\n\n  Cache.prototype._cacheAdd = function (what, value, args) {\n    if (value) {\n      value = value instanceof Date ? clone(value) : cloneDates(value);\n    }\n\n    if (what === 'all') {\n      this.all = value;\n    } else {\n      args._value = value;\n      this[what].push(args);\n    }\n  };\n  /**\n   * @return false - not in the cache\n   * @return null  - cached, but zero occurrences (before/after)\n   * @return Date  - cached (before/after)\n   * @return []    - cached, but zero occurrences (all/between)\n   * @return [Date1, DateN] - cached (all/between)\n   */\n\n\n  Cache.prototype._cacheGet = function (what, args) {\n    var cached = false;\n    var argsKeys = args ? Object.keys(args) : [];\n\n    var findCacheDiff = function (item) {\n      for (var i = 0; i < argsKeys.length; i++) {\n        var key = argsKeys[i];\n\n        if (!argsMatch(args[key], item[key])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    var cachedObject = this[what];\n\n    if (what === 'all') {\n      cached = this.all;\n    } else if (isArray(cachedObject)) {\n      // Let's see whether we've already called the\n      // 'what' method with the same 'args'\n      for (var i = 0; i < cachedObject.length; i++) {\n        var item = cachedObject[i];\n        if (argsKeys.length && findCacheDiff(item)) continue;\n        cached = item._value;\n        break;\n      }\n    }\n\n    if (!cached && this.all) {\n      // Not in the cache, but we already know all the occurrences,\n      // so we can find the correct dates from the cached ones.\n      var iterResult = new IterResult(what, args);\n\n      for (var i = 0; i < this.all.length; i++) {\n        if (!iterResult.accept(this.all[i])) break;\n      }\n\n      cached = iterResult.getValue();\n\n      this._cacheAdd(what, cached, args);\n    }\n\n    return isArray(cached) ? cloneDates(cached) : cached instanceof Date ? clone(cached) : cached;\n  };\n\n  return Cache;\n}();\n\nexport { Cache }; //# sourceMappingURL=cache.js.map","map":null,"metadata":{},"sourceType":"module"}