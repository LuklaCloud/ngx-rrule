{"ast":null,"code":"import { padStart } from './helpers';\nexport var datetime = function (y, m, d, h, i, s) {\n  if (h === void 0) {\n    h = 0;\n  }\n\n  if (i === void 0) {\n    i = 0;\n  }\n\n  if (s === void 0) {\n    s = 0;\n  }\n\n  return new Date(Date.UTC(y, m - 1, d, h, i, s));\n};\n/**\n * General date-related utilities.\n * Also handles several incompatibilities between JavaScript and Python\n *\n */\n\nexport var MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/**\n * Number of milliseconds of one day\n */\n\nexport var ONE_DAY = 1000 * 60 * 60 * 24;\n/**\n * @see: <http://docs.python.org/library/datetime.html#datetime.MAXYEAR>\n */\n\nexport var MAXYEAR = 9999;\n/**\n * Python uses 1-Jan-1 as the base for calculating ordinals but we don't\n * want to confuse the JS engine with milliseconds > Number.MAX_NUMBER,\n * therefore we use 1-Jan-1970 instead\n */\n\nexport var ORDINAL_BASE = datetime(1970, 1, 1);\n/**\n * Python: MO-SU: 0 - 6\n * JS: SU-SAT 0 - 6\n */\n\nexport var PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];\n/**\n * py_date.timetuple()[7]\n */\n\nexport var getYearDay = function (date) {\n  var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  return Math.ceil((dateNoTime.valueOf() - new Date(date.getUTCFullYear(), 0, 1).valueOf()) / ONE_DAY) + 1;\n};\nexport var isLeapYear = function (year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\nexport var isDate = function (value) {\n  return value instanceof Date;\n};\nexport var isValidDate = function (value) {\n  return isDate(value) && !isNaN(value.getTime());\n};\n/**\n * @return {Number} the date's timezone offset in ms\n */\n\nexport var tzOffset = function (date) {\n  return date.getTimezoneOffset() * 60 * 1000;\n};\n/**\n * @see: <http://www.mcfedries.com/JavaScript/DaysBetween.asp>\n */\n\nexport var daysBetween = function (date1, date2) {\n  // The number of milliseconds in one day\n  // Convert both dates to milliseconds\n  var date1ms = date1.getTime() - tzOffset(date1);\n  var date2ms = date2.getTime() - tzOffset(date2); // Calculate the difference in milliseconds\n\n  var differencems = date1ms - date2ms; // Convert back to days and return\n\n  return Math.round(differencems / ONE_DAY);\n};\n/**\n * @see: <http://docs.python.org/library/datetime.html#datetime.date.toordinal>\n */\n\nexport var toOrdinal = function (date) {\n  return daysBetween(date, ORDINAL_BASE);\n};\n/**\n * @see - <http://docs.python.org/library/datetime.html#datetime.date.fromordinal>\n */\n\nexport var fromOrdinal = function (ordinal) {\n  return new Date(ORDINAL_BASE.getTime() + ordinal * ONE_DAY);\n};\nexport var getMonthDays = function (date) {\n  var month = date.getUTCMonth();\n  return month === 1 && isLeapYear(date.getUTCFullYear()) ? 29 : MONTH_DAYS[month];\n};\n/**\n * @return {Number} python-like weekday\n */\n\nexport var getWeekday = function (date) {\n  return PY_WEEKDAYS[date.getUTCDay()];\n};\n/**\n * @see: <http://docs.python.org/library/calendar.html#calendar.monthrange>\n */\n\nexport var monthRange = function (year, month) {\n  var date = datetime(year, month + 1, 1);\n  return [getWeekday(date), getMonthDays(date)];\n};\n/**\n * @see: <http://docs.python.org/library/datetime.html#datetime.datetime.combine>\n */\n\nexport var combine = function (date, time) {\n  time = time || date;\n  return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));\n};\nexport var clone = function (date) {\n  var dolly = new Date(date.getTime());\n  return dolly;\n};\nexport var cloneDates = function (dates) {\n  var clones = [];\n\n  for (var i = 0; i < dates.length; i++) {\n    clones.push(clone(dates[i]));\n  }\n\n  return clones;\n};\n/**\n * Sorts an array of Date or Time objects\n */\n\nexport var sort = function (dates) {\n  dates.sort(function (a, b) {\n    return a.getTime() - b.getTime();\n  });\n};\nexport var timeToUntilString = function (time, utc) {\n  if (utc === void 0) {\n    utc = true;\n  }\n\n  var date = new Date(time);\n  return [padStart(date.getUTCFullYear().toString(), 4, '0'), padStart(date.getUTCMonth() + 1, 2, '0'), padStart(date.getUTCDate(), 2, '0'), 'T', padStart(date.getUTCHours(), 2, '0'), padStart(date.getUTCMinutes(), 2, '0'), padStart(date.getUTCSeconds(), 2, '0'), utc ? 'Z' : ''].join('');\n};\nexport var untilStringToDate = function (until) {\n  var re = /^(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2})Z?)?$/;\n  var bits = re.exec(until);\n  if (!bits) throw new Error(\"Invalid UNTIL value: \".concat(until));\n  return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));\n};\n\nvar dateTZtoISO8601 = function (date, timeZone) {\n  // date format for sv-SE is almost ISO8601\n  var dateStr = date.toLocaleString('sv-SE', {\n    timeZone: timeZone\n  }); // '2023-02-07 10:41:36'\n\n  return dateStr.replace(' ', 'T') + 'Z';\n};\n\nexport var dateInTimeZone = function (date, timeZone) {\n  var localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone; // Date constructor can only reliably parse dates in ISO8601 format\n\n  var dateInLocalTZ = new Date(dateTZtoISO8601(date, localTimeZone));\n  var dateInTargetTZ = new Date(dateTZtoISO8601(date, timeZone !== null && timeZone !== void 0 ? timeZone : 'UTC'));\n  var tzOffset = dateInTargetTZ.getTime() - dateInLocalTZ.getTime();\n  return new Date(date.getTime() - tzOffset);\n}; //# sourceMappingURL=dateutil.js.map","map":null,"metadata":{},"sourceType":"module"}